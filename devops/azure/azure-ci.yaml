# Azure DevOps Pipeline for TaskForge .NET 8
# Build, test and publish .NET 8 application
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
    - dev
    - feature/*
  paths:
    exclude:
    - README.md
    - docs/*
    - design/*

pr:
  branches:
    include:
    - master
    - dev
    - feature/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/TaskForge.sln'
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.411'
  
  # Code coverage variables
  codeCoverageTool: 'Cobertura'
  summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
  minimumCodeCoverage: 80  # Minimum code coverage percentage required

stages:
- stage: BuildAndTest
  displayName: 'Build and Test Services'
  jobs:
  - job: BuildCommonProjects
    displayName: 'Build Common Projects (Domain, Application, Persistence)'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: |
          src/TaskForge.Domain/TaskForge.Domain.csproj
          src/TaskForge.Application/TaskForge.Application.csproj
          src/TaskForge.Persistence/TaskForge.Persistence.csproj
          src/TaskForge.StartupTasks/TaskForge.StartupTasks.csproj
        feedsToUse: 'select'
        verbosityRestore: 'Minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Build Common Projects'
      inputs:
        command: 'build'
        projects: |
          src/TaskForge.Domain/TaskForge.Domain.csproj
          src/TaskForge.Application/TaskForge.Application.csproj
          src/TaskForge.Persistence/TaskForge.Persistence.csproj
          src/TaskForge.StartupTasks/TaskForge.StartupTasks.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

  - job: BuildAndTestAPI
    displayName: 'Build and Test API'
    dependsOn: BuildCommonProjects
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    - task: DotNetCoreCLI@2
      displayName: 'Restore API and Tests'
      inputs:
        command: 'restore'
        projects: |
          src/TaskForge.API/TaskForge.API.csproj
          tests/Tests.TaskForge.API/Tests.TaskForge.API.csproj
          tests/IntegratonTests.TaskForge.API/IntegratonTests.TaskForge.API.csproj
        feedsToUse: 'select'
        verbosityRestore: 'Minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Build API'
      inputs:
        command: 'build'
        projects: 'src/TaskForge.API/TaskForge.API.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: DotNetCoreCLI@2
      displayName: 'Build API Test Projects'
      inputs:
        command: 'build'
        projects: |
          tests/Tests.TaskForge.API/Tests.TaskForge.API.csproj
          tests/IntegratonTests.TaskForge.API/IntegratonTests.TaskForge.API.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: PowerShell@2
      displayName: 'Verify API Build Success on PR'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "✅ API Build completed successfully!"

    - task: DotNetCoreCLI@2
      displayName: 'Run API Unit Tests'
      inputs:
        command: 'test'
        projects: 'tests/Tests.TaskForge.API/Tests.TaskForge.API.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/API'
        publishTestResults: true
        testRunTitle: 'API Unit Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Run API Integration Tests'
      inputs:
        command: 'test'
        projects: 'tests/IntegratonTests.TaskForge.API/IntegratonTests.TaskForge.API.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/API'
        publishTestResults: true
        testRunTitle: 'API Integration Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API'
      condition: ne(variables['Build.Reason'], 'PullRequest')
      inputs:
        command: 'publish'
        projects: 'src/TaskForge.API/TaskForge.API.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api --no-build'
        zipAfterPublish: true

  - job: BuildAndTestEventProcessor
    displayName: 'Build and Test EventProcessor'
    dependsOn: BuildCommonProjects
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    - task: DotNetCoreCLI@2
      displayName: 'Restore EventProcessor and Tests'
      inputs:
        command: 'restore'
        projects: |
          src/TaskForge.EventProcessor/TaskForge.EventProcessor.csproj
          tests/Tests.TaskForge.EventProcessor/Tests.TaskForge.EventProcessor.csproj
          tests/IntegratonTests.TaskForge.EventProcessor/IntegratonTests.TaskForge.EventProcessor.csproj
        feedsToUse: 'select'
        verbosityRestore: 'Minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Build EventProcessor'
      inputs:
        command: 'build'
        projects: 'src/TaskForge.EventProcessor/TaskForge.EventProcessor.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: DotNetCoreCLI@2
      displayName: 'Build EventProcessor Test Projects'
      inputs:
        command: 'build'
        projects: |
          tests/Tests.TaskForge.EventProcessor/Tests.TaskForge.EventProcessor.csproj
          tests/IntegratonTests.TaskForge.EventProcessor/IntegratonTests.TaskForge.EventProcessor.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: PowerShell@2
      displayName: 'Verify EventProcessor Build Success on PR'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "✅ EventProcessor Build completed successfully!"

    - task: DotNetCoreCLI@2
      displayName: 'Run EventProcessor Unit Tests'
      inputs:
        command: 'test'
        projects: 'tests/Tests.TaskForge.EventProcessor/Tests.TaskForge.EventProcessor.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/EventProcessor'
        publishTestResults: true
        testRunTitle: 'EventProcessor Unit Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Run EventProcessor Integration Tests'
      inputs:
        command: 'test'
        projects: 'tests/IntegratonTests.TaskForge.EventProcessor/IntegratonTests.TaskForge.EventProcessor.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/EventProcessor'
        publishTestResults: true
        testRunTitle: 'EventProcessor Integration Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish EventProcessor'
      condition: ne(variables['Build.Reason'], 'PullRequest')
      inputs:
        command: 'publish'
        projects: 'src/TaskForge.EventProcessor/TaskForge.EventProcessor.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/eventprocessor --no-build'
        zipAfterPublish: true

  - job: BuildAndTestMessageConsumer
    displayName: 'Build and Test MessageConsumer'
    dependsOn: BuildCommonProjects
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    - task: DotNetCoreCLI@2
      displayName: 'Restore MessageConsumer and Tests'
      inputs:
        command: 'restore'
        projects: |
          src/TaskForge.MessageConsumer/TaskForge.MessageConsumer.csproj
          tests/Tests.TaskForge.MessageConsumer/Tests.TaskForge.MessageConsumer.csproj
          tests/IntegratonTests.TaskForge.MessageConsumer/IntegratonTests.TaskForge.MessageConsumer.csproj
        feedsToUse: 'select'
        verbosityRestore: 'Minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Build MessageConsumer'
      inputs:
        command: 'build'
        projects: 'src/TaskForge.MessageConsumer/TaskForge.MessageConsumer.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: DotNetCoreCLI@2
      displayName: 'Build MessageConsumer Test Projects'
      inputs:
        command: 'build'
        projects: |
          tests/Tests.TaskForge.MessageConsumer/Tests.TaskForge.MessageConsumer.csproj
          tests/IntegratonTests.TaskForge.MessageConsumer/IntegratonTests.TaskForge.MessageConsumer.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: PowerShell@2
      displayName: 'Verify MessageConsumer Build Success on PR'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "✅ MessageConsumer Build completed successfully!"

    - task: DotNetCoreCLI@2
      displayName: 'Run MessageConsumer Unit Tests'
      inputs:
        command: 'test'
        projects: 'tests/Tests.TaskForge.MessageConsumer/Tests.TaskForge.MessageConsumer.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/MessageConsumer'
        publishTestResults: true
        testRunTitle: 'MessageConsumer Unit Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Run MessageConsumer Integration Tests'
      inputs:
        command: 'test'
        projects: 'tests/IntegratonTests.TaskForge.MessageConsumer/IntegratonTests.TaskForge.MessageConsumer.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/MessageConsumer'
        publishTestResults: true
        testRunTitle: 'MessageConsumer Integration Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish MessageConsumer'
      condition: ne(variables['Build.Reason'], 'PullRequest')
      inputs:
        command: 'publish'
        projects: 'src/TaskForge.MessageConsumer/TaskForge.MessageConsumer.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/messageconsumer --no-build'
        zipAfterPublish: true

  - job: RunCommonTests
    displayName: 'Run Common Tests (Application, Domain, Persistence)'
    dependsOn: BuildCommonProjects
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        installationPath: '$(Agent.ToolsDirectory)/dotnet'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Common Test Projects'
      inputs:
        command: 'restore'
        projects: |
          tests/Tests.TaskForge.Application/Tests.TaskForge.Application.csproj
          tests/Tests.TaskForge.Domain/Tests.TaskForge.Domain.csproj
          tests/Tests.TaskForge.Persistence/Tests.TaskForge.Persistence.csproj
          tests/IntegratonTests.TaskForge.Application/IntegratonTests.TaskForge.Application.csproj
          tests/IntegratonTests.TaskForge.Persistence/IntegratonTests.TaskForge.Persistence.csproj
        feedsToUse: 'select'
        verbosityRestore: 'Minimal'

    - task: DotNetCoreCLI@2
      displayName: 'Build Common Test Projects'
      inputs:
        command: 'build'
        projects: |
          tests/Tests.TaskForge.Application/Tests.TaskForge.Application.csproj
          tests/Tests.TaskForge.Domain/Tests.TaskForge.Domain.csproj
          tests/Tests.TaskForge.Persistence/Tests.TaskForge.Persistence.csproj
          tests/IntegratonTests.TaskForge.Application/IntegratonTests.TaskForge.Application.csproj
          tests/IntegratonTests.TaskForge.Persistence/IntegratonTests.TaskForge.Persistence.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'
        verbosity: 'minimal'
      continueOnError: false

    - task: DotNetCoreCLI@2
      displayName: 'Run Common Unit Tests'
      inputs:
        command: 'test'
        projects: |
          tests/Tests.TaskForge.Application/Tests.TaskForge.Application.csproj
          tests/Tests.TaskForge.Domain/Tests.TaskForge.Domain.csproj
          tests/Tests.TaskForge.Persistence/Tests.TaskForge.Persistence.csproj
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/Common'
        publishTestResults: true
        testRunTitle: 'Common Unit Tests - $(Build.SourceBranchName)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Common Integration Tests'
      inputs:
        command: 'test'
        projects: |
          tests/IntegratonTests.TaskForge.Application/IntegratonTests.TaskForge.Application.csproj
          tests/IntegratonTests.TaskForge.Persistence/IntegratonTests.TaskForge.Persistence.csproj
        arguments: '--configuration $(buildConfiguration) --no-build --nologo --collect:"XPlat Code Coverage" --settings:$(System.DefaultWorkingDirectory)/tests/coverlet.runsettings --logger trx --logger "console;verbosity=normal" --results-directory $(Agent.TempDirectory)/TestResults/Common'
        publishTestResults: true
        testRunTitle: 'Common Integration Tests - $(Build.SourceBranchName)'

  - job: CheckCodeCoverage
    displayName: 'Check Code Coverage Threshold'
    dependsOn:
    - BuildAndTestAPI
    - BuildAndTestEventProcessor
    - BuildAndTestMessageConsumer
    - RunCommonTests
    condition: succeeded()
    steps:
    - task: PowerShell@2
      displayName: 'Check Code Coverage Threshold'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "================================================"
          Write-Host "Code Coverage Check"
          Write-Host "================================================"
          
          $coverageFiles = Get-ChildItem -Path "$(Agent.TempDirectory)/TestResults" -Recurse -Filter "coverage.cobertura.xml" -ErrorAction SilentlyContinue
          
          if (-not $coverageFiles) {
            Write-Warning "⚠️ No coverage files found. Tests may not have generated coverage data."
            Write-Host "This could happen if tests failed or coverage collection is disabled."
            Write-Host "Continuing without coverage validation..."
            exit 0
          }
          
          Write-Host "Found $($coverageFiles.Count) coverage file(s)"
          Write-Host ""
          
          $totalLines = 0
          $totalCoveredLines = 0
          $totalBranches = 0
          $totalCoveredBranches = 0
          $processedFiles = 0
          
          foreach ($file in $coverageFiles) {
            Write-Host "Processing: $($file.Name)"
            try {
              [xml]$coverageXml = Get-Content $file.FullName -ErrorAction Stop
              
              if ($coverageXml.coverage) {
                $linesValid = [int]$coverageXml.coverage.'lines-valid'
                $linesCovered = [int]$coverageXml.coverage.'lines-covered'
                $branchesValid = [int]$coverageXml.coverage.'branches-valid'
                $branchesCovered = [int]$coverageXml.coverage.'branches-covered'
                
                if ($linesValid -gt 0) {
                  $totalLines += $linesValid
                  $totalCoveredLines += $linesCovered
                  $totalBranches += $branchesValid
                  $totalCoveredBranches += $branchesCovered
                  $processedFiles++
                  
                  $lineRate = ($linesCovered / $linesValid) * 100
                  $branchRate = if ($branchesValid -gt 0) { ($branchesCovered / $branchesValid) * 100 } else { 0 }
                  
                  Write-Host "  Lines: $linesCovered/$linesValid ($([math]::Round($lineRate, 2))%)"
                  Write-Host "  Branches: $branchesCovered/$branchesValid ($([math]::Round($branchRate, 2))%)"
                }
              }
            } catch {
              Write-Warning "  Failed to parse coverage file: $_"
            }
          }
          
          Write-Host ""
          Write-Host "================================================"
          
          if ($processedFiles -gt 0 -and $totalLines -gt 0) {
            $overallLineCoverage = ($totalCoveredLines / $totalLines) * 100
            $overallBranchCoverage = if ($totalBranches -gt 0) { ($totalCoveredBranches / $totalBranches) * 100 } else { 0 }
            
            $overallLineCoverage = [math]::Round($overallLineCoverage, 2)
            $overallBranchCoverage = [math]::Round($overallBranchCoverage, 2)
            
            Write-Host "Overall Code Coverage Summary:"
            Write-Host "  Line Coverage: $overallLineCoverage% ($totalCoveredLines/$totalLines lines)"
            Write-Host "  Branch Coverage: $overallBranchCoverage% ($totalCoveredBranches/$totalBranches branches)"
            Write-Host ""
            Write-Host "Required Minimum Line Coverage: $(minimumCodeCoverage)%"
            Write-Host "================================================"
            
            if ($overallLineCoverage -lt $(minimumCodeCoverage)) {
              Write-Error ""
              Write-Error "❌ CODE COVERAGE CHECK FAILED!"
              Write-Error "Current coverage: $overallLineCoverage%"
              Write-Error "Required minimum: $(minimumCodeCoverage)%"
              Write-Error "Difference: $([math]::Round($(minimumCodeCoverage) - $overallLineCoverage, 2))%"
              Write-Error ""
              Write-Error "Please add more unit tests to improve code coverage."
              Write-Error "PR cannot be merged until coverage requirement is met."
              Write-Error ""
              exit 1
            } else {
              Write-Host ""
              Write-Host "✅ CODE COVERAGE CHECK PASSED"
              Write-Host "✅ Coverage $overallLineCoverage% meets the minimum requirement of $(minimumCodeCoverage)%"
              Write-Host ""
            }
          } else {
            Write-Warning "Could not calculate overall coverage from processed files."
            Write-Warning "Coverage validation skipped."
          }
          
          Write-Host "================================================"

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/TestResults/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/TestResults/**/coverage'
        failIfCoverageEmpty: false

  - job: PublishArtifacts
    displayName: 'Publish Build Artifacts'
    dependsOn:
    - BuildAndTestAPI
    - BuildAndTestEventProcessor
    - BuildAndTestMessageConsumer
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish All Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'

- stage: Docker
  displayName: 'Build Docker Images'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: BuildDockerImages
    displayName: 'Build Docker Images'
    steps:
    - task: Docker@2
      displayName: 'Build API Docker Image'
      inputs:
        command: 'build'
        repository: 'taskforge-api'
        dockerfile: 'src/TaskForge.API/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(Build.BuildId)
          latest

    - task: Docker@2
      displayName: 'Build EventProcessor Docker Image'
      inputs:
        command: 'build'
        repository: 'taskforge-eventprocessor'
        dockerfile: 'src/TaskForge.EventProcessor/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(Build.BuildId)
          latest
